#!/usr/bin/env python
# -*- coding: utf-8 -*-

import ast
import datetime
import logging

from pxreader   import PXReader
from pxfunction import PXFunction
from pxclass    import PXClass

__version__ = '0.0.2'

logger = logging.getLogger("INRS.IEHSS.Python.cython.module")

header = """\
# -*- coding: utf-8 -*-

# This is an automatically generated file.
# Manual changes will be merged and conflicts marqued!
#
# Generated by %s version %s on %s

import cython
""" % (__package__,
       __version__,
       datetime.datetime.now().replace(microsecond=0).isoformat(' '))

class PXModule(ast.NodeVisitor, PXReader):
    def __init__(self):
        self.imprt = []
        self.items = []

    def merge(self, other):
        self.imprt = self.imprt + [i for i in other.imprt if i not in self.imprt]
        self.items = self.items + [i for i in other.items if i not in self.items]
        for i in self.items:
            try:
                idx = other.items.index(i)
                i.merge( other.items[idx] )
            except ValueError:
                pass
        
    #--------------------
    #   Python source code parser (ast visitors)
    #--------------------
    def visit_Module(self, node):
        self.generic_visit(node)
        self.resolveHierarchy()

    def visit_ClassDef(self, node):
        v = PXClass()
        v.doVisit(node)
        self.items.append(v)

    def visit_FunctionDef(self, node):
        v = PXFunction()
        v.doVisit(node)
        self.items.append(v)

    def resolveHierarchy(self):
        clss = [ i for i in self.items if isinstance(i, PXClass) ]
        for c in clss:
            c.resolveHierarchy(clss)
        
    #--------------------
    #   Reader for pxd files
    #--------------------
    def read(self, fi):
        lcls = {}
        for l in PXReader.read_line(fi):
            if l.split(' ')[0] in ['import', 'cimport', 'from']:
                if l.split(' ')[1] not in ['cython']:
                    self.imprt.append(l)
            elif l[0:11] == 'cdef class ':
                c = PXClass()
                c.read(l, fi)
                self.items.append(c)
            elif l[0:6] == 'cpdef ':
                f = PXFunction()
                f.read(l, lcls)
                self.items.append(f)
                lcls = {}
            elif l[0:14] == '@cython.locals':
                lcls = PXReader.read_locals(l)

    #--------------------
    #   Writer for pxd file
    #--------------------
    def write(self, fo):
        fo.write(header)
        for i in self.imprt:
            fo.write('%s\n' % i)
        fo.write('\n')
        for i in self.items:
            i.write(fo)
            fo.write('\n')


if __name__ == "__main__":
    def main(opt_args = None):
        m = PXModule()

    streamHandler = logging.StreamHandler()
    logger.addHandler(streamHandler)
    logger.setLevel(logging.DEBUG)

    main()
